version: "2.2"
services:

  nginx:
    container_name: nginx
    image: nginx
    networks:
      - mojo
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs/nginx/nginx.local.crt:/etc/nginx/cert.crt:ro
      - ./certs/nginx/nginx.local.key:/etc/nginx/cert.key:ro

  mojo:
    container_name: mojo
    image: s30139/mojo:v3
    cpus: 0.50
    networks:
      mojo:
        aliases:
          - mojo
    ports:
      - "83:83/tcp"
    volumes:
      - ./mojo/:/mojo/
    command: >
      bash -c "cpanm Redis Cache::Memcached::Fast
      && morbo -v -w lk/lib/ -l http://*:83 ./lk/script/lk"
    #entrypoint: ["/bin/sh", "-c", "while true; do sleep 30; done;"]
    #entrypoint: ["morbo", "-v", "-w", "lk/lib/", "-l", "http://*:83", "./lk/script/lk" ]

  # redis
  redis:
    container_name: redis
    image: redis
    networks:
      mojo:
    ports:
      - "6379:6379/tcp"
  # redis
  memcached:
    container_name: memcached
    image: memcached
    networks:
      mojo:
    ports:
      - "11211:11211/tcp"

  # postgresql
  pgbouncer-users-ro:
    container_name: pgbouncer-users-ro
    image: edoburu/pgbouncer:1.9.0
    networks:
      - db-users-ro
      - mojo
    ports:
      - "5441:5441/tcp"
    volumes:
      - ./postgresql/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./postgresql/userlist.txt:/etc/pgbouncer/userlist.txt:ro
      - ./certs/rootCA.pem:/etc/pgbouncer/ca.crt:ro
      - ./certs/postgresql/postgresql.crt:/etc/pgbouncer/cert.crt:ro
      - ./certs/postgresql/postgresql.key:/etc/pgbouncer/cert.key:ro

  postgresql-users-ro:
    container_name: postgresql-users-ro
    image: postgres:13.1
    environment:
      - POSTGRES_PASSWORD="rootpass"
    networks:
      - db-users-ro
    volumes:
      - ./postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./logs/postgres:/var/log/postgresql
    #command: [ "-c", "logging_collector=on", "-c", "log_filename=postgresql.log", "-c", "log_directory=/var/log/postgresql" ]
    # command: "postgres", "-c", "logging_collector=on", "-c", "log_directory=/logs",
    # "-c", "log_filename=postgresql.log", "-c", "log_statement=all"

  # elk
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    environment:
      - discovery.type=single-node
    networks:
      mojo:
        aliases:
          - elk # cert was build for 'elk' dns name
    volumes:
      - ./elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./certs/rootCA.pem:/usr/share/elasticsearch/config/ca.crt
      - ./certs/elk/elk.crt:/usr/share/elasticsearch/config/node.crt
      - ./certs/elk/elk.key:/usr/share/elasticsearch/config/node.key
      #            - name: elkdata
      #              mountPath: /usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.2.0
    environment:
      - ELASTICSEARCH_URL="https://elasticsearch:9200"
    networks:
      mojo:
    volumes:
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./certs/rootCA.pem:/usr/share/kibana/config/elasticsearch-ca.pem

  filebeat:
    container_name: filebeat
    user: root
    image: docker.elastic.co/beats/filebeat:7.9.1
    networks:
      mojo:
    volumes:
      - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./certs/rootCA.pem:/usr/share/filebeat/certs/ca.pem
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    #entrypoint: ["/bin/sh", "-c", "while true; do sleep 30; done;"]
    entrypoint: ["filebeat", "-e", "--strict.perms=false" ]

networks:
  mojo:
  db-users-ro:
